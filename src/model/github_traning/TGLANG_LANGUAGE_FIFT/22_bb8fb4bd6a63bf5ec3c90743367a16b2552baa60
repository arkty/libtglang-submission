constant code

"TonUtil.fif" include

// Created by Andrei Marchenko <ftkvyn@gmail.com>

{ ."usage: " @' $0 type ." <workchain-id> <students-number> <registry-name> <teacher-key> <principal-key> [<filename-base>]" cr
  ."Creates a new register contract in specified workchain, with teacher's private key saved to or loaded from <teacher-key>.pk" cr
  1 halt
} : usage
$# dup 5 < swap 6 > or ' usage if

$1 parse-workchain-id =: wc    // set workchain id from command line argument
$2 parse-int =: students-number // ToDo: generate students' ids
$3 =: registry-name
$4 =: teacher-key
$5 =: principal-key
def? $6 { @' $6 } { "new-register" } cond constant file-base

0 constant seqno

."Creating new register in workchain " wc . cr

teacher-key +".pk" load-generate-keypair 
constant teacher-key_priv
constant teacher-key_pub

principal-key +".pk" load-generate-keypair 
constant principal-key_priv
constant principal-key_pub

dictnew constant studs-dict

."Generating student ids " cr

// Had to be some kind of random ids, but as far as there is no
//   random generation in fift yet, just creating constant ones.
studs-dict
1000
{
    dup . cr // printing id 
    dup // duplicating id - one instance will be used for 
        // adding entry to the dict, other - to add and use in the
        // next iteration.  
    rot swap
    dictnew
    <b swap dict, b> <s
    2 exch
    32
    udict!
    drop // result of adding to the dict
    // over 3 roll 8 udict!+ 0= abort"key already added"
    swap
    121 +
} students-number times
."done generating student ids" cr

drop // counter
constant studs-dict

<b 
    seqno 32 u, 
    teacher-key_pub B,
    principal-key_pub B, // same key for teacher and principal
    studs-dict dict,
    <b registry-name $, b> ref,
 b> constant storage

<b b{0011} s, code ref, storage ref, null dict, b> constant state-init  // create StateInit
state-init .s
state-init ."StateInit: " <s csr. cr
state-init hash wc swap 2dup 2constant reg_addr
."new register address = " 2dup .addr cr
2dup file-base +".addr" save-address-verbose
."Non-bounceable address (for init): " 2dup 7 .Addr cr
."Bounceable address (for later access): " 6 .Addr cr
<b 0 4 u, // mode=0 initialization
   seqno 32 u, // seq_no
b>
constant new_contract_msg
new_contract_msg
.s cr
dup ."signing message: " <s csr. cr
new_contract_msg hash teacher-key_priv ed25519_sign_uint constant signature
drop
<b b{1000100} s, reg_addr addr, b{000010} s, state-init <s s, b{0} s, signature B, new_contract_msg ref, b>
dup ."External message for initialization is " <s csr. cr
2 boc+>B dup Bx. cr
file-base +"-query.boc" tuck B>file
."(Saved register creating query to file " type .")" cr