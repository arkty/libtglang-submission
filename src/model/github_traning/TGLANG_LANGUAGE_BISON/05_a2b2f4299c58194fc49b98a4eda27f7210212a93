
/*
Declare token types at the top of the bison file,
causing them to be automatically generated in parser.tab.h
for use by scanner.c.
*/

%token TOKEN_ID
%token TOKEN_INTEGER
%token TOKEN_INT
%token TOKEN_SEMI
%token TOKEN_PLUS
%token TOKEN_MINUS
%token TOKEN_MUL
%token TOKEN_DIV
%token TOKEN_LPAREN
%token TOKEN_RPAREN

%{

#include <math.h>
#include <stdio.h>
#include <stdlib.h>

/*
Clunky: Manually declare the interface to the scanner generated by flex. 
*/

extern char *yytext;
extern int yylex();
extern int yyerror( char *str );

%}

%%

/* Here is the grammar: program is the start symbol. */

program : expr TOKEN_SEMI { return 0; }
	;

expr	: expr TOKEN_PLUS term
	| expr TOKEN_MINUS term
	| term
	;

term	: term TOKEN_MUL factor
	| term TOKEN_DIV factor
	| factor
	;

factor	: TOKEN_MINUS factor
	| TOKEN_LPAREN expr TOKEN_RPAREN
	| TOKEN_INT
	;

%%

/*
This function will be called by bison if the parse should
encounter an error.  In principle, "str" will contain something
useful.  In practice, it often does not.
*/

int yyerror( char *str )
{
	printf("parse error: %s\n",str);
	return 0;
}
