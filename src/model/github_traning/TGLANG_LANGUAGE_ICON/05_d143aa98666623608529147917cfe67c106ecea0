### This file created by IYACC 1.1
### Please send bug reports to jeffery@cs.nmt.edu
#define YYPREFIX "yy"
$define BREAK 257
$define DOUBLE 258
$define ELSE 259
$define FOR 260
$define IF 261
$define INT 262
$define RETURN 263
$define VOID 264
$define WHILE 265
$define IDENTIFIER 266
$define CLASSNAME 267
$define CLASS 268
$define STRING 269
$define BOOL 270
$define INTLIT 271
$define DOUBLELIT 272
$define STRINGLIT 273
$define BOOLLIT 274
$define NULLVAL 275
$define LESSTHANOREQUAL 276
$define GREATERTHANOREQUAL 277
$define ISEQUALTO 278
$define NOTEQUALTO 279
$define LOGICALAND 280
$define LOGICALOR 281
$define INCREMENT 282
$define DECREMENT 283
$define PUBLIC 284
$define STATIC 285
$define YYERRCODE 256
procedure init() 
  yylhs := [                                        -1,
    0,    1,    1,    2,    2,    3,    3,    3,    4,    7,
    7,    7,    7,    7,    9,    9,   10,    8,    8,   11,
   11,   12,   12,    5,   13,   15,   16,   16,   17,   17,
   18,    6,   14,   19,   19,   20,   20,   21,   21,   22,
   24,   23,   23,   23,   23,   23,   23,   23,   23,   23,
   23,   25,   33,   33,   28,   29,   30,   30,   37,   37,
   38,   31,   32,   39,   39,   39,   40,   40,   41,   41,
   42,   42,   26,   26,   27,   43,   43,   43,   43,   44,
   44,   44,   44,   44,   46,   46,   45,   47,   47,   35,
   35,   48,   48,   49,   49,   49,   50,   50,   50,   50,
   51,   51,   51,   52,   52,   52,   52,   53,   53,   54,
   54,   54,   55,   55,   56,   56,   36,   36,   34,   57,
   57,   58,   58,   58,
  ]
  yylen := [                            2,
    4,    3,    2,    1,    2,    1,    1,    1,    3,    1,
    1,    1,    1,    1,    1,    1,    3,    1,    3,    1,
    3,    1,    1,    2,    4,    4,    1,    0,    1,    3,
    2,    2,    3,    1,    0,    1,    2,    1,    1,    2,
    2,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    2,    1,    1,    5,    7,    6,    8,    1,    2,
    2,    5,    9,    1,    1,    0,    1,    0,    1,    0,
    1,    3,    2,    3,    3,    1,    1,    1,    3,    1,
    1,    1,    1,    1,    1,    3,    3,    1,    0,    4,
    6,    1,    1,    2,    2,    1,    1,    3,    3,    3,
    1,    3,    3,    1,    1,    1,    1,    1,    3,    1,
    3,    3,    1,    3,    1,    3,    1,    1,    3,    1,
    1,    1,    1,    1,
  ]
  yydefred := [                         0,
    0,    0,    0,    0,    0,    1,   11,   10,    0,   13,
   12,    0,    3,    0,    4,    6,    7,    8,    0,    0,
   16,    0,    0,    0,    0,    2,    5,   20,    0,    0,
    0,    0,   24,   32,   15,    0,    0,    0,   29,   23,
   22,    0,    9,    0,    0,   17,    0,    0,    0,    0,
    0,   80,   81,   83,   82,   84,   43,    0,    0,    0,
   42,    0,    0,   36,   38,   39,    0,   44,   45,   46,
   47,   48,   49,   50,   51,    0,   53,    0,    0,   76,
    0,    0,    0,   26,    0,    0,   25,    0,   21,    0,
   73,    0,    0,    0,    0,    0,  118,   78,   67,    0,
    0,   96,   97,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   33,   37,   40,   52,    0,  123,  124,
  122,    0,   30,   74,   65,   71,    0,    0,    0,    0,
   77,   94,   95,   75,    0,    0,    0,    0,    0,  104,
  105,  106,  107,    0,    0,    0,    0,    0,    0,   79,
   85,    0,    0,    0,  119,    0,    0,    0,   98,   99,
  100,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   90,    0,    0,    0,   72,    0,   62,   86,    0,    0,
    0,    0,   59,   91,    0,    0,    0,   56,   61,    0,
   60,    0,    0,   58,   63,    0,    0,   55,
  ]
  yydgoto := [                          2,
    6,   14,   15,   16,   17,   18,   59,   29,  130,   21,
   30,   42,   22,   61,   23,   37,   38,   39,   62,   63,
   64,   65,   66,   67,   68,   69,   70,   71,   72,   73,
   74,   75,   76,   97,   98,   99,  182,  183,  127,  100,
  185,  128,  101,   80,   81,  152,  153,  102,  103,  104,
  105,  144,  106,  107,  108,  109,   82,  122,
  ]
  yysindex := [                      -218,
 -200,    0, -181,  -35,  -95,    0,    0,    0,   51,    0,
    0, -177,    0,  -93,    0,    0,    0,    0, -152,   79,
    0,   16,   16,  227,  217,    0,    0,    0,  -30,   65,
 -133,  169,    0,    0,    0, -152,  117,  116,    0,    0,
    0,  -96,    0, -152,   95,    0,  -46,  132,  150,   50,
  153,    0,    0,    0,    0,    0,    0,   50, -152,   52,
    0,   72,  169,    0,    0,    0,  141,    0,    0,    0,
    0,    0,    0,    0,    0,  143,    0,    0,  158,    0,
    0,  -24,   65,    0,  227,   51,    0,   65,    0,  148,
    0,  -39,   50,   50,   50,   52,    0,    0,    0,  151,
  158,    0,    0,  145,  109,   97, -100,  -69,  -68,   50,
  171,  170,   50,    0,    0,    0,    0,  -51,    0,    0,
    0,   50,    0,    0,    0,    0,  157,  173,  177,   52,
    0,    0,    0,    0,   50,   50,   50,   50,   50,    0,
    0,    0,    0,   50,   50,   50,   50,   50,  180,    0,
    0,  182,  188,  197,    0,   50,   -1,   16,    0,    0,
    0,  145,  145,  109,   97,   97, -100,  -69,  268,   50,
    0,   50,  179,   52,    0,  -11,    0,    0,  219,   -1,
 -111,    9,    0,    0,  222,  173,  224,    0,    0, -111,
    0,   16,   50,    0,    0,  234,   16,    0,
  ]
  yyrindex := [                         0,
    0,    0,    0,    0,    0,    0,    0,    0,  -44,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   19,
    0,    0,    0,  235,    0,    0,    0,    0,    0,    6,
    0,  172,    0,    0,    0,    0,    0,  257,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  240,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  -58,
    0,    0,  175,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  107,    0,    0,
  -37,    0,  -13,    0,    0,    0,    0,   14,    0,    0,
    0,  246,    0,    0,    0,    1,    0,    0,    0,    0,
   10,    0,    0,   56,   76,   15,   90,   45,   43,    0,
    0,  247,  266,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  250,    0,   34,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  276,    0,  -26,    0,  240,    0,    0,    0,    0,
    0,   62,   68,   82,   23,   88,   96,  102,    0,    0,
    0,  266,    0,  -21,    0,  124,    0,    0,    0,  277,
    0,  144,    0,    0,    0,  278,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,
  ]
  yygindex := [                         0,
    0,    0,  314,    0,    0,    0,  181,  270,  445,    0,
    5,    0,    0,    4,  289,    0,    0,  245,    0,    0,
  287,    0,  195,  273,    0,    0,    0,  -71,    0,    0,
    0,    0,  -12,  288,  388,  378,    0,  190,    0,  223,
    0,  198,  390,    0,  441,    0,  203,    0,  329,   42,
  244,    0,   53,  253,  255,    0,    0,    0,
  ]
$define YYTABLESIZE 638
  yytable := [                         77,
   58,   15,  120,   77,   77,   77,   77,   77,   77,   77,
   87,   32,   91,   44,   87,   87,   87,   87,   87,   87,
   87,   77,   77,  121,   77,   33,   34,   31,   43,   13,
   31,   26,   87,   87,   87,   87,  121,   93,   58,  120,
   83,   93,   93,   93,   93,   93,   92,   93,   88,   18,
   92,   92,   92,   92,   92,  110,   92,   19,  110,   93,
   93,  120,   93,  111,   18,    1,  111,    3,   92,   92,
   93,   92,   19,  110,   93,   93,   93,   93,   93,  126,
   93,  111,   95,  117,    4,  115,  117,    5,  115,   58,
   24,  113,   93,   93,   94,   93,  101,   31,  101,  101,
  101,  117,  103,  115,  103,  103,  103,   25,  102,  189,
  102,  102,  102,   28,  101,  101,  108,  101,  189,  108,
  103,  103,  109,  103,   31,  109,  102,  102,  112,  102,
  113,  112,   46,  113,  108,  108,  114,  108,   32,  114,
  109,  109,  116,  109,  175,  116,  112,   54,  113,  187,
   54,  139,   78,  138,  114,   45,  142,   84,  143,   85,
  116,  176,    7,   55,    7,   54,    8,  126,    8,   86,
    9,   92,    9,   10,   11,   10,   11,  145,  146,  162,
  163,  137,   55,   57,  188,   19,  135,   89,   12,   93,
   12,  136,  110,  194,   19,  195,  114,  165,  166,  116,
  198,  117,   57,  118,   36,   41,  124,   14,   58,  134,
  147,  150,  148,   44,  154,  156,  157,  158,    7,   90,
  169,   15,    8,  120,  120,  170,   35,   57,  171,   10,
   11,   52,   53,   54,   55,   56,  172,  180,   77,   77,
   77,   77,   77,   77,  121,  121,   55,  181,   55,   87,
   87,   87,   87,   87,   87,   87,   87,  119,  120,  184,
  120,  120,  192,  193,   35,   36,   57,  190,   57,   52,
   53,   54,   55,   56,  197,   28,   93,   93,   93,   93,
   93,   93,  120,  120,   14,   92,   92,   92,   92,   92,
   92,   32,  110,  110,  110,  110,   35,   27,   68,   34,
  111,  111,  111,  111,   66,   41,   89,   58,   64,   93,
   93,   93,   93,   93,   93,   35,   88,   70,   69,   77,
   52,   53,   54,   55,   56,  115,   57,   27,  112,  123,
   87,  101,  101,  101,  101,  101,  101,  103,  103,  103,
  103,  103,  103,  102,  102,  102,  102,  102,  102,  115,
   77,  108,  108,  108,  108,  108,  108,  109,  109,  109,
  109,  109,  109,  177,  125,  112,  112,  112,  112,  113,
  113,  191,  140,  141,  179,  114,  114,  186,  173,   77,
   55,   55,  116,   55,   55,   55,   55,  164,   55,   55,
   32,    0,   55,   55,   55,   55,   55,   55,   55,  167,
   57,   57,  168,   57,   57,   57,   57,    0,   57,   57,
    0,    0,   57,   57,   57,   57,   57,   57,   57,   78,
    0,   79,  132,  133,    0,   47,    7,    0,   48,   49,
    8,   50,    0,   51,   35,  111,    0,   10,   11,   52,
   53,   54,   55,   56,   77,    0,    0,    0,    0,   20,
   78,    0,   79,    0,    0,    0,   77,    0,   20,    0,
    0,    0,    0,  159,  160,  161,    0,   77,   20,   20,
  129,    0,    0,    0,    7,    0,   60,    0,    8,   78,
   40,   79,   35,    0,    7,   10,   11,  149,    8,    0,
  151,    0,   35,    0,   96,   10,   11,    0,    0,  155,
    0,    0,   96,    0,    0,    0,    0,   60,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   47,    0,    0,   48,   49,   20,
   50,    0,   51,   35,  131,  131,   60,   96,   52,   53,
   54,   55,   56,    0,   78,    0,   79,  178,    0,  151,
    0,    0,    0,    0,   96,    0,   78,   96,   79,    0,
    0,    0,    0,    0,    0,    0,   96,   78,    0,   79,
  196,    0,    0,    0,    0,  131,  131,  131,  131,  131,
    0,    0,    0,    0,  131,  131,  131,  131,  131,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   96,  174,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  174,   96,    0,   96,    0,    0,    0,
    0,    0,    0,    0,  174,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   96,
  ]
  yycheck := [                         37,
   40,   46,   61,   41,   42,   43,   44,   45,   46,   47,
   37,  123,   59,   44,   41,   42,   43,   44,   45,   46,
   47,   59,   60,   61,   62,   22,   23,   41,   59,  125,
   44,  125,   59,   60,   61,   62,   61,   37,   40,   61,
   36,   41,   42,   43,   44,   45,   37,   47,   44,   44,
   41,   42,   43,   44,   45,   41,   47,   44,   44,   59,
   60,   61,   62,   41,   59,  284,   44,  268,   59,   60,
   37,   62,   59,   59,   41,   42,   43,   44,   45,   92,
   47,   59,   33,   41,  266,   41,   44,  123,   44,   40,
   40,   40,   59,   60,   45,   62,   41,   46,   43,   44,
   45,   59,   41,   59,   43,   44,   45,  285,   41,  181,
   43,   44,   45,  266,   59,   60,   41,   62,  190,   44,
   59,   60,   41,   62,   46,   44,   59,   60,   41,   62,
   41,   44,  266,   44,   59,   60,   41,   62,  123,   44,
   59,   60,   41,   62,  157,   44,   59,   41,   59,  261,
   44,   43,   46,   45,   59,   91,   60,   41,   62,   44,
   59,  158,  258,   40,  258,   59,  262,  180,  262,  266,
  266,   40,  266,  269,  270,  269,  270,  278,  279,  138,
  139,   37,   59,   40,  181,    5,   42,   93,  284,   40,
  284,   47,   40,  190,   14,  192,  125,  145,  146,   59,
  197,   59,   59,   46,   24,   25,   59,  266,   40,   59,
  280,   41,  281,   44,  266,   59,   44,   41,  258,  266,
   41,  266,  262,  282,  283,   44,  266,   59,   41,  269,
  270,  271,  272,  273,  274,  275,   40,   59,  276,  277,
  278,  279,  280,  281,  282,  283,  123,  259,  125,  276,
  277,  278,  279,  280,  281,  282,  283,  282,  283,   41,
  282,  283,   41,   40,  266,   85,  123,  259,  125,  271,
  272,  273,  274,  275,   41,   41,  276,  277,  278,  279,
  280,  281,  282,  283,  266,  276,  277,  278,  279,  280,
  281,  123,  278,  279,  280,  281,  125,   41,   59,  125,
  278,  279,  280,  281,   59,   59,   41,   40,   59,  276,
  277,  278,  279,  280,  281,  266,   41,   41,   41,   32,
  271,  272,  273,  274,  275,  281,   59,   14,   59,   85,
   42,  276,  277,  278,  279,  280,  281,  276,  277,  278,
  279,  280,  281,  276,  277,  278,  279,  280,  281,   63,
   63,  276,  277,  278,  279,  280,  281,  276,  277,  278,
  279,  280,  281,  169,   92,  278,  279,  280,  281,  280,
  281,  182,  276,  277,  172,  280,  281,  180,  156,   92,
  257,  258,  281,  260,  261,  262,  263,  144,  265,  266,
  123,   -1,  269,  270,  271,  272,  273,  274,  275,  147,
  257,  258,  148,  260,  261,  262,  263,   -1,  265,  266,
   -1,   -1,  269,  270,  271,  272,  273,  274,  275,   32,
   -1,   32,   94,   95,   -1,  257,  258,   -1,  260,  261,
  262,  263,   -1,  265,  266,   58,   -1,  269,  270,  271,
  272,  273,  274,  275,  157,   -1,   -1,   -1,   -1,    5,
   63,   -1,   63,   -1,   -1,   -1,  169,   -1,   14,   -1,
   -1,   -1,   -1,  135,  136,  137,   -1,  180,   24,   25,
   93,   -1,   -1,   -1,  258,   -1,   32,   -1,  262,   92,
  264,   92,  266,   -1,  258,  269,  270,  110,  262,   -1,
  113,   -1,  266,   -1,   50,  269,  270,   -1,   -1,  122,
   -1,   -1,   58,   -1,   -1,   -1,   -1,   63,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  257,   -1,   -1,  260,  261,   85,
  263,   -1,  265,  266,   94,   95,   92,   93,  271,  272,
  273,  274,  275,   -1,  157,   -1,  157,  170,   -1,  172,
   -1,   -1,   -1,   -1,  110,   -1,  169,  113,  169,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  122,  180,   -1,  180,
  193,   -1,   -1,   -1,   -1,  135,  136,  137,  138,  139,
   -1,   -1,   -1,   -1,  144,  145,  146,  147,  148,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  156,  157,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  169,  170,   -1,  172,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  180,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  193,
  ]
$define YYFINAL 2
$define YYMAXTOKEN 285
  yyname := [
"end-of-file",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
"'!'",0,0,0,"'%'",0,0,"'('","')'","'*'","'+'","','","'-'","'.'","'/'",0,0,0,0,0,
0,0,0,0,0,0,"';'","'<'","'='","'>'",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,"'['",0,"']'",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,"'{'",0,"'}'",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,"BREAK","DOUBLE","ELSE","FOR","IF",
"INT","RETURN","VOID","WHILE","IDENTIFIER","CLASSNAME","CLASS","STRING","BOOL",
"INTLIT","DOUBLELIT","STRINGLIT","BOOLLIT","NULLVAL","LESSTHANOREQUAL",
"GREATERTHANOREQUAL","ISEQUALTO","NOTEQUALTO","LOGICALAND","LOGICALOR",
"INCREMENT","DECREMENT","PUBLIC","STATIC",
  ]
  yyrule := [
"$accept : ClassDecl",
"ClassDecl : PUBLIC CLASS IDENTIFIER ClassBody",
"ClassBody : '{' ClassBodyDecls '}'",
"ClassBody : '{' '}'",
"ClassBodyDecls : ClassBodyDecl",
"ClassBodyDecls : ClassBodyDecls ClassBodyDecl",
"ClassBodyDecl : FieldDecl",
"ClassBodyDecl : MethodDecl",
"ClassBodyDecl : ConstructorDecl",
"FieldDecl : Type VarDecls ';'",
"Type : INT",
"Type : DOUBLE",
"Type : BOOL",
"Type : STRING",
"Type : Name",
"Name : IDENTIFIER",
"Name : QualifiedName",
"QualifiedName : Name '.' IDENTIFIER",
"VarDecls : VarDeclarator",
"VarDecls : VarDecls ',' VarDeclarator",
"VarDeclarator : IDENTIFIER",
"VarDeclarator : VarDeclarator '[' ']'",
"MethodReturnVal : Type",
"MethodReturnVal : VOID",
"MethodDecl : MethodHeader Block",
"MethodHeader : PUBLIC STATIC MethodReturnVal MethodDeclarator",
"MethodDeclarator : IDENTIFIER '(' FormalParmListOpt ')'",
"FormalParmListOpt : FormalParmList",
"FormalParmListOpt :",
"FormalParmList : FormalParm",
"FormalParmList : FormalParmList ',' FormalParm",
"FormalParm : Type VarDeclarator",
"ConstructorDecl : MethodDeclarator Block",
"Block : '{' BlockStmtsOpt '}'",
"BlockStmtsOpt : BlockStmts",
"BlockStmtsOpt :",
"BlockStmts : BlockStmt",
"BlockStmts : BlockStmts BlockStmt",
"BlockStmt : LocalVarDeclStmt",
"BlockStmt : Stmt",
"LocalVarDeclStmt : LocalVarDecl ';'",
"LocalVarDecl : Type VarDecls",
"Stmt : Block",
"Stmt : ';'",
"Stmt : ExprStmt",
"Stmt : BreakStmt",
"Stmt : ReturnStmt",
"Stmt : IfThenStmt",
"Stmt : IfThenElseStmt",
"Stmt : IfThenElseIfStmt",
"Stmt : WhileStmt",
"Stmt : ForStmt",
"ExprStmt : StmtExpr ';'",
"StmtExpr : Assignment",
"StmtExpr : MethodCall",
"IfThenStmt : IF '(' Expr ')' Block",
"IfThenElseStmt : IF '(' Expr ')' Block ELSE Block",
"IfThenElseIfStmt : IF '(' Expr ')' Block ElseIfSequence",
"IfThenElseIfStmt : IF '(' Expr ')' Block ElseIfSequence ELSE Block",
"ElseIfSequence : ElseIfStmt",
"ElseIfSequence : ElseIfSequence ElseIfStmt",
"ElseIfStmt : ELSE IfThenStmt",
"WhileStmt : WHILE '(' Expr ')' Stmt",
"ForStmt : FOR '(' ForInit ';' ExprOpt ';' ForUpdate ')' Block",
"ForInit : StmtExprList",
"ForInit : LocalVarDecl",
"ForInit :",
"ExprOpt : Expr",
"ExprOpt :",
"ForUpdate : StmtExprList",
"ForUpdate :",
"StmtExprList : StmtExpr",
"StmtExprList : StmtExprList ',' StmtExpr",
"BreakStmt : BREAK ';'",
"BreakStmt : BREAK IDENTIFIER ';'",
"ReturnStmt : RETURN ExprOpt ';'",
"Primary : Literal",
"Primary : FieldAccess",
"Primary : MethodCall",
"Primary : '(' Expr ')'",
"Literal : INTLIT",
"Literal : DOUBLELIT",
"Literal : BOOLLIT",
"Literal : STRINGLIT",
"Literal : NULLVAL",
"ArgList : Expr",
"ArgList : ArgList ',' Expr",
"FieldAccess : Primary '.' IDENTIFIER",
"ArgListOpt : ArgList",
"ArgListOpt :",
"MethodCall : Name '(' ArgListOpt ')'",
"MethodCall : Primary '.' IDENTIFIER '(' ArgListOpt ')'",
"PostFixExpr : Primary",
"PostFixExpr : Name",
"UnaryExpr : '-' UnaryExpr",
"UnaryExpr : '!' UnaryExpr",
"UnaryExpr : PostFixExpr",
"MulExpr : UnaryExpr",
"MulExpr : MulExpr '*' UnaryExpr",
"MulExpr : MulExpr '/' UnaryExpr",
"MulExpr : MulExpr '%' UnaryExpr",
"AddExpr : MulExpr",
"AddExpr : AddExpr '+' MulExpr",
"AddExpr : AddExpr '-' MulExpr",
"RelOp : LESSTHANOREQUAL",
"RelOp : GREATERTHANOREQUAL",
"RelOp : '<'",
"RelOp : '>'",
"RelExpr : AddExpr",
"RelExpr : RelExpr RelOp AddExpr",
"EqExpr : RelExpr",
"EqExpr : EqExpr ISEQUALTO RelExpr",
"EqExpr : EqExpr NOTEQUALTO RelExpr",
"CondAndExpr : EqExpr",
"CondAndExpr : CondAndExpr LOGICALAND EqExpr",
"CondOrExpr : CondAndExpr",
"CondOrExpr : CondOrExpr LOGICALOR CondAndExpr",
"Expr : CondOrExpr",
"Expr : Assignment",
"Assignment : LeftHandSide AssignOp Expr",
"LeftHandSide : Name",
"LeftHandSide : FieldAccess",
"AssignOp : '='",
"AssignOp : INCREMENT",
"AssignOp : DECREMENT",
  ]

end

#####################################################################
#####################################################################
invocable all    # need to look up semantic actions by name

global yytext    # user variable to return contextual strings
global yyval     # used to return semantic vals from action routines
global yylval    # the 'lval' (result) I got from yylex()
global yydebug   # (boolean) do I want debug output?
global yynerrs   # (integer) number of errors so far
global yyerrflag # (integer) was there an error?
global yychar    # (integer) the current working character
global action    # maps an integer to a semantic action procedure

global yylhs
global yylen
global yydefred
global yydgoto
global yysindex
global yyrindex
global yygindex
global yytable
global yycheck
global yyname
global yyrule

global statestk         # state stack
global valstk           # value stack
################################################################
# procedure: init_stacks : allocate and prepare stacks
################################################################
procedure init_stacks()
  local i
  statestk := []
  valstk := []
  yyval  := 0 
  yylval := 0 
  action := list(1000, action_null)  # remove hard coded 1000 later
  every i := 1 to 1000 do action[i] := proc("action_" || i)
end

$define YYACCEPT return 0
$define YYABORT return 1
################################################################
# procedure: yyparse : parse input and execute indicated items
################################################################
procedure yyparse()
  local yyn        # next next thing to do
  local yym        #
  local yystate    # current parsing state from state table
  local yys        # current token string
  local doaction   # set to 1 if there need to execute action
  local token      # current token

  if /yytable then init() 
  init_stacks() 
  yynerrs   := 0 
  yyerrflag := 0 
  yychar    := -1           # impossible char forces a read
  yystate   := 0            # initial state
  push(statestk, yystate)   # save it

  repeat { # until parsing is done, either correctly, or w/error
    doaction := 1 

    ##### NEXT ACTION (from reduction table)
	yyn := yydefred[yystate+1]

    while yyn = 0 do {

      if yychar < 0 then {   # we want a char?
        yychar := yylex()    # get next token
        ##### ERROR CHECK ####
        if yychar < 0 then { # it it didn't work/error
          yychar := 0        # change it to default string (no -1!)
          if \yydebug = 1 then yylexdebug(yystate, yychar) 
          }
        } # yychar < 0
	  
      yyn := yysindex[yystate+1]  # get amount to shift by (shift index)

      if (yyn ~= 0)           & ((yyn +:= yychar) >= 0) & 
         (yyn <= YYTABLESIZE) & (yycheck[yyn+1] = yychar) then {
		
        ##### NEXT STATE ####
        yystate := yytable[yyn+1] # we are in a new state
        push(statestk, yystate)   # save it
        push(valstk, yylval)      # push our lval as the input for next rule
        yychar := -1              # since we have 'eaten' a token, say we need another
        if yyerrflag > 0 then     # have we recovered an error?
           yyerrflag -:= 1        # give ourselves credit
        doaction := 0             # but don't process yet
        break                     # quit the yyn=0 loop
        }

    yyn := yyrindex[yystate+1]    # reduce

    if (yyn ~= 0)           & ((yyn +:= yychar) >= 0) &
       (yyn <= YYTABLESIZE) & (yycheck[yyn+1] = yychar) then {
      # e reduced!
      yyn      := yytable[yyn+1] 
      doaction := 1  # get ready to execute
      break          # drop down to actions
      }
    else { #ERROR RECOVERY
      if yyerrflag == 0 then {
        (\yyerror | write)("syntax error") 
        yynerrs +:= 1 
      }
      if yyerrflag < 3 then {     # low error count?
        yyerrflag := 3 
        repeat { #do until break
          if *statestk < 1 then {  # check for under & overflow here
            (\yyerror | write)("stack underflow. aborting...")   # note lower case 's'
            return 1 
          }
          yyn := yysindex[statestk[1]] 
          if ((yyn ~= 0) & (yyn +:= YYERRCODE) >= 0 &
                    yyn <= YYTABLESIZE & yycheck[yyn+1] == YYERRCODE) then {
            yystate := yytable[yyn+1] 
            push(statestk, yystate) 
            push(valstk, yylval) 
            doaction := 0 
            break 
          }
          else {
            if *statestk = 0 then { # check for under & overflow here
              write("Stack underflow. aborting...") # capital 'S'
              return 1 
            }
            pop(statestk) 
            pop(valstk) 
            }
          }
        }
      else  # discard this token
        {
        if yychar = 0 then return 1  # yyabort
        if \yydebug = 1 then {
          yys := &null 
          if yychar <= YYMAXTOKEN then yys := yyname[yychar+1] 
          if integer(yys) & yys = 0 then yys := "illegal-symbol" 
          write("state ",  yystate, ", error recovery discards token ",
                yychar, " (", yys, ")") 
          }
        yychar := -1       # read another
        }
      } # end error recovery
      yyn := yydefred[yystate+1] 
    }# yyn = 0 loop

    if doaction = 0 then   # any reason not to proceed?
      next                 # skip action

    yym := yylen[yyn+1]    # get count of terminals on rhs
    yyval := valstk[yym]   # get current semantic value
    if arv := action[yyn]() then return arv # execute the semantic action

    ##### Now let's reduce... ####
    every 1 to yym do pop(statestk)# we just reduced yylen states
    yystate := statestk[1]        # get new state

    every 1 to yym do pop(valstk) # corresponding value drop
    yym := yylhs[yyn+1]           # select next TERMINAL(on lhs)
    if yystate = 0 & yym = 0 then {
                                  # done? 'rest' state and at first TERMINAL
      yystate := YYFINAL          # explicitly say we're done
      push(statestk, YYFINAL)     # and save it
      push(valstk, yyval)         # also save the semantic value of parsing
      if yychar < 0 then {        # we want another character?
        yychar := yylex()         # get next character
        if yychar < 0 then yychar := 0   #clean, if necessary
      }
      if yychar = 0 then break    # Good exit (if lex returns 0  -)
                                  # quit the loop--all DONE
    } # if yystate
    else {                        #else not done yet
      # get next state and push, for next yydefred[]
      yyn := yygindex[yym+1]        # find out where to go
      if (yyn ~= 0)           & ((yyn +:= yystate) >= 0) &
         (yyn <= YYTABLESIZE) & (yycheck[yyn+1] = yystate) then {
        yystate := yytable[yyn+1]   # get new state
        }
      else {
        yystate := yydgoto[yym+1]   # else go to new defred
	     }
      push(statestk, yystate)       # going again, so push state & val...
      push(valstk, yyval)           # for next action
      }
    } # main loop

  return 0 # yyaccept!!
end

### end of procedure parse() ######################################

### start semantic actions ########################################

procedure action_null()
  #write("null action")
end

procedure action_1()
#line 8 "j0gram.y"

  yyval:=j0.node("ClassDecl",1000,valstk[2],valstk[1]);
  j0.print(yyval);
 
end

procedure action_2()
#line 12 "j0gram.y"
 yyval:=j0.node("ClassBody",1010,valstk[2]); 
end

procedure action_3()
#line 13 "j0gram.y"
 yyval:=j0.node("ClassBody",1011); 
end

procedure action_5()
#line 15 "j0gram.y"

  yyval:=j0.node("ClassBodyDecls",1020,valstk[2],valstk[1]); 
end

procedure action_9()
#line 18 "j0gram.y"

  yyval:=j0.node("FieldDecl",1030,valstk[3],valstk[2]); 
end

procedure action_17()
#line 23 "j0gram.y"

  yyval:=j0.node("QualifiedName",1040,valstk[3],valstk[1]);
end

procedure action_19()
#line 26 "j0gram.y"

  yyval:=j0.node("VarDecls",1050,valstk[3],valstk[1]); 
end

procedure action_21()
#line 28 "j0gram.y"

  yyval:=j0.node("VarDeclarator",1060,valstk[3]); 
end

procedure action_24()
#line 32 "j0gram.y"

  yyval:=j0.node("MethodDecl",1380,valstk[2],valstk[1]);
 
end

procedure action_25()
#line 35 "j0gram.y"

  yyval:=j0.node("MethodHeader",1070,valstk[2],valstk[1]); 
end

procedure action_26()
#line 37 "j0gram.y"

  yyval:=j0.node("MethodDeclarator",1080,valstk[4],valstk[2]); 
end

procedure action_30()
#line 41 "j0gram.y"

  yyval:=j0.node("FormalParmList",1090,valstk[3],valstk[1]); 
end

procedure action_31()
#line 43 "j0gram.y"

  yyval:=j0.node("FormalParm",1100,valstk[2],valstk[1]);
 
end

procedure action_32()
#line 47 "j0gram.y"

  yyval:=j0.node("ConstructorDecl",1110,valstk[2],valstk[1]); 
end

procedure action_33()
#line 50 "j0gram.y"
yyval:=j0.node("Block",1200,valstk[2]);
end

procedure action_37()
#line 52 "j0gram.y"

  yyval:=j0.node("BlockStmts",1130,valstk[2],valstk[1]); 
end

procedure action_41()
#line 57 "j0gram.y"

  yyval:=j0.node("LocalVarDecl",1140,valstk[2],valstk[1]); 
end

procedure action_55()
#line 68 "j0gram.y"

  yyval:=j0.node("IfThenStmt",1150,valstk[3],valstk[1]); 
end

procedure action_56()
#line 70 "j0gram.y"

  yyval:=j0.node("IfThenElseStmt",1160,valstk[5],valstk[3],valstk[1]); 
end

procedure action_57()
#line 72 "j0gram.y"

  yyval:=j0.node("IfThenElseIfStmt",1170,valstk[4],valstk[2],valstk[1]); 
end

procedure action_58()
#line 74 "j0gram.y"

  yyval:=j0.node("IfThenElseIfStmt",1171,valstk[6],valstk[4],valstk[3],valstk[1]); 
end

procedure action_60()
#line 77 "j0gram.y"

  yyval:=j0.node("ElseIfSequence",1180,valstk[2],valstk[1]); 
end

procedure action_61()
#line 79 "j0gram.y"

  yyval:=j0.node("ElseIfStmt",1190,valstk[1]); 
end

procedure action_62()
#line 81 "j0gram.y"

  yyval:=j0.node("WhileStmt",1210,valstk[3],valstk[1]); 
end

procedure action_63()
#line 84 "j0gram.y"

  yyval:=j0.node("ForStmt",1220,valstk[7],valstk[5],valstk[3],valstk[1]); 
end

procedure action_72()
#line 90 "j0gram.y"

  yyval:=j0.node("StmtExprList",1230,valstk[3],valstk[1]); 
end

procedure action_74()
#line 93 "j0gram.y"

  yyval:=j0.node("BreakStmt",1240,valstk[2]); 
end

procedure action_75()
#line 95 "j0gram.y"

  yyval:=j0.node("ReturnStmt",1250,valstk[2]); 
end

procedure action_79()
#line 98 "j0gram.y"

  yyval:=valstk[2];
end

procedure action_86()
#line 102 "j0gram.y"

  yyval:=j0.node("ArgList",1270,valstk[3],valstk[1]); 
end

procedure action_87()
#line 104 "j0gram.y"

  yyval:=j0.node("FieldAccess",1280,valstk[3],valstk[1]); 
end

procedure action_90()
#line 108 "j0gram.y"

  yyval:=j0.node("MethodCall",1290,valstk[4],valstk[2]); 
end

procedure action_91()
#line 110 "j0gram.y"

    yyval:=j0.node("MethodCall",1291,valstk[6],valstk[4],valstk[2]); 
end

procedure action_94()
#line 115 "j0gram.y"

  yyval:=j0.node("UnaryExpr",1300,valstk[2],valstk[1]); 
end

procedure action_95()
#line 117 "j0gram.y"

  yyval:=j0.node("UnaryExpr",1301,valstk[2],valstk[1]); 
end

procedure action_98()
#line 121 "j0gram.y"

      yyval:=j0.node("MulExpr",1310,valstk[3],valstk[1]); 
end

procedure action_99()
#line 123 "j0gram.y"

      yyval:=j0.node("MulExpr",1311,valstk[3],valstk[1]); 
end

procedure action_100()
#line 125 "j0gram.y"

      yyval:=j0.node("MulExpr",1312,valstk[3],valstk[1]); 
end

procedure action_102()
#line 128 "j0gram.y"

      yyval:=j0.node("AddExpr",1320,valstk[3],valstk[1]); 
end

procedure action_103()
#line 130 "j0gram.y"

      yyval:=j0.node("AddExpr",1321,valstk[3],valstk[1]); 
end

procedure action_109()
#line 133 "j0gram.y"

  yyval:=j0.node("RelExpr",1330,valstk[3],valstk[2],valstk[1]); 
end

procedure action_111()
#line 137 "j0gram.y"

  yyval:=j0.node("EqExpr",1340,valstk[3],valstk[1]); 
end

procedure action_112()
#line 139 "j0gram.y"

  yyval:=j0.node("EqExpr",1341,valstk[3],valstk[1]); 
end

procedure action_114()
#line 141 "j0gram.y"

  yyval:=j0.node("CondAndExpr", 1350, valstk[3], valstk[1]); 
end

procedure action_116()
#line 143 "j0gram.y"

  yyval:=j0.node("CondOrExpr", 1360, valstk[3], valstk[1]); 
end

procedure action_119()
#line 147 "j0gram.y"

yyval:=j0.node("Assignment",1370, valstk[3], valstk[2], valstk[1]); 
end

#line 909 "j0gram.icn"
