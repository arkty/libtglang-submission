#
# Euler problem 39
#
# """
# If p is the perimeter of a right angle triangle with integral length sides, 
# {a,b,c}, there are exactly three solutions for p = 120.
# 
# {20,48,52}, {24,45,51}, {30,40,50}
# 
# For which value of p <= 1000, is the number of solutions maximised?
# 
# """
#
# This program was written by Hakan Kjellerstrand (hakank@gmail.com)
# Also see my Icon/Unicon page http://www.hakank.org/icon/
#

procedure main()
    problem39()
    # problem39b()
end


procedure problem39() 
    squares := table()
    n := 1000-1
    every i := 1 to n do {
        squares[i*i] := i*i
    }

    counts := table(0)
    max_count := 0
    max_val := 0
    every x := !squares & y := !squares do {
        if x < y & (sqrt(x) + sqrt(y) + sqrt(x + y)) < 1000 & member(squares,x+y) then {
            c := integer(sqrt(x) + sqrt(y) + sqrt(x+y))
            counts[c] +:= 1
            if max_count <:= counts[c]   then {
                max_val := c
            }
        }
    }
    write(max_val)

end

# alternative how to compute the max value
procedure problem39b() 
    squares := table()
    n := 1000-1
    every i := 1 to n do {
        squares[i*i] := i*i
    }

    counts := table(0)
    every x := !squares & y := !squares do {
        if x < y & (sqrt(x) + sqrt(y) + sqrt(x + y)) < 1000 & member(squares,x+y) then {
            c := integer(sqrt(x) + sqrt(y) + sqrt(x+y))
            counts[c] +:= 1
        }
    }

    max_count := 0
    every max_count <:= !counts
    every t := key(counts) & counts[t] = max_count & max_val := t
    write(max_val)

end


#
# brute force version: 14.3s
#
procedure problem39c()

    m := 1000
    best_p := 0
    best_cc := 0
    every p := 1 to m do {
        L := []
        cc := 0
        every a := 1 to p/2 do {
            every b := a to (p-a)/2 do {
                if a+b > p then next
                
                c := sqrt(a^2+b^2)
                
                if a + b + c = p then {
                    cc +:= 1
                    put(L, [a,b,c])
                } else {
                    next
                }
                if best_cc <:= cc then {
                    best_p := p
                    write("p:", p,  ":", cc)
                }                        
            }
        }
    }
    write("best p: ", best_p)
end


