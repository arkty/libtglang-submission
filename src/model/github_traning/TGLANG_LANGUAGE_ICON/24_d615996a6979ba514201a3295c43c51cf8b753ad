#
# Euler problem 18
#
# """
# By starting at the top of the triangle below and moving to adjacent 
# numbers on the row below, the maximum total from top to bottom is 23.
#
# 3
# 7 4
# 2 4 6
# 8 5 9 3
#
# That is, 3 + 7 + 4 + 9 = 23.
#
# Find the maximum total from top to bottom of the triangle below:
#
# 75
# 95 64
# 17 47 82
# 18 35 87 10
# 20 04 82 47 65
# 19 01 23 75 03 34
# 88 02 77 73 07 63 67
# 99 65 04 28 06 16 70 92
# 41 41 26 56 83 40 80 70 33
# 41 48 72 33 47 32 37 16 94 29
# 53 71 44 65 25 43 91 52 97 51 14
# 70 11 33 28 77 73 17 78 39 68 17 57
# 91 71 52 38 17 14 91 43 58 50 27 29 48
# 63 66 04 68 89 53 67 30 73 16 69 87 40 31
# 04 62 98 27 23 09 70 98 73 93 38 53 60 04 23
#
# NOTE: As there are only 16384 routes, it is possible to solve this problem 
# by trying every route. However, Problem 67, is the same challenge with a 
# triangle containing one-hundred rows; it cannot be solved by brute force, 
# and requires a clever method! ;o)
# """
#
# This program was written by Hakan Kjellerstrand (hakank@gmail.com)
# Also see my Icon/Unicon page http://www.hakank.org/icon/
#

link numbers, strings

global tri, ms

procedure main()
   problem18()
end

procedure problem18()

    ms := 0
    tri_str :="75\n_
95 64\n_
17 47 82\n_
18 35 87 10\n_
20 04 82 47 65\n_
19 01 23 75 03 34\n_
88 02 77 73 07 63 67\n_
99 65 04 28 06 16 70 92\n_
41 41 26 56 83 40 80 70 33\n_
41 48 72 33 47 32 37 16 94 29\n_
53 71 44 65 25 43 91 52 97 51 14\n_
70 11 33 28 77 73 17 78 39 68 17 57\n_
91 71 52 38 17 14 91 43 58 50 27 29 48\n_
63 66 04 68 89 53 67 30 73 16 69 87 40 31\n_
04 62 98 27 23 09 70 98 73 93 38 53 60 04 23"

    tri_lines := splitx(tri_str, "\n")
    tri := []
    every i := 1 to *tri_lines do {
        p := []
        # every put(p, integer(!splitx(tri_lines[i], " ")))
        every put(p, integer(words(tri_lines[i], " ")))
        put(tri, p)
    }
    pp(1, 1, tri[1,1])
    write(ms)
end


procedure pp(row, column, sum)
    row +:= 1
    if row = *tri+1 then {
        if sum > ms then ms := sum
        return
    }
    every i := 0 to 1 do pp(row, column+i, sum+tri[row,column+i])

end


procedure splitx(str, chars) 
  local vec

  vec := []
  str ? {
      repeat {
          # tab either to upto(chars) or to end of line (position 0)
          put(vec, tab(upto(chars) | 0))
          move(1) | break
      } 
  }
  
  
  return vec
  
end
