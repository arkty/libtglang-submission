### This file created by IYACC 1.1
### Please send bug reports to jeffery@cs.nmt.edu
#define YYPREFIX "yy"
$define BREAK 257
$define DOUBLE 258
$define ELSE 259
$define FOR 260
$define IF 261
$define INT 262
$define RETURN 263
$define VOID 264
$define WHILE 265
$define IDENTIFIER 266
$define CLASSNAME 267
$define CLASS 268
$define STRING 269
$define BOOL 270
$define INTLIT 271
$define DOUBLELIT 272
$define STRINGLIT 273
$define BOOLLIT 274
$define NULLVAL 275
$define LESSTHANOREQUAL 276
$define GREATERTHANOREQUAL 277
$define ISEQUALTO 278
$define NOTEQUALTO 279
$define LOGICALAND 280
$define LOGICALOR 281
$define INCREMENT 282
$define DECREMENT 283
$define PUBLIC 284
$define STATIC 285
$define YYERRCODE 256
procedure init() 
  yylhs := [                                        -1,
    0,    1,    1,    2,    2,    3,    3,    3,    4,    7,
    7,    7,    7,    7,    9,    9,   10,    8,    8,   11,
   11,   12,   12,    5,   13,   15,   16,   16,   17,   17,
   18,    6,   19,   20,   20,   14,   22,   22,   23,   23,
   24,   24,   25,   27,   26,   26,   26,   26,   26,   26,
   26,   26,   26,   26,   26,   36,   28,   37,   37,   37,
   31,   32,   33,   33,   42,   42,   43,   34,   35,   44,
   44,   44,   45,   45,   46,   46,   47,   47,   29,   29,
   30,   48,   48,   48,   48,   49,   49,   49,   49,   49,
   40,   21,   21,   50,   39,   39,   39,   39,   51,   51,
   52,   52,   52,   53,   53,   53,   53,   54,   54,   54,
   55,   55,   55,   55,   56,   56,   57,   57,   57,   58,
   58,   59,   59,   41,   41,   38,   60,   60,   61,   61,
   61,
  ]
  yylen := [                            2,
    4,    3,    2,    1,    2,    1,    1,    1,    3,    1,
    1,    1,    1,    1,    1,    1,    3,    1,    3,    1,
    3,    1,    1,    2,    4,    4,    1,    0,    1,    3,
    2,    2,    4,    1,    0,    3,    1,    0,    1,    2,
    1,    1,    2,    2,    1,    1,    1,    1,    1,    0,
    1,    1,    1,    1,    1,    0,    2,    1,    1,    1,
    5,    7,    6,    8,    1,    2,    2,    5,    9,    1,
    1,    0,    1,    0,    1,    0,    1,    3,    2,    3,
    3,    1,    3,    1,    1,    1,    1,    1,    1,    1,
    4,    1,    3,    3,    4,    4,    6,    6,    1,    1,
    2,    2,    1,    1,    3,    3,    3,    1,    3,    3,
    1,    1,    1,    1,    1,    3,    1,    3,    3,    1,
    3,    1,    3,    1,    1,    3,    1,    1,    1,    1,
    1,
  ]
  yydefred := [                         0,
    0,    0,    0,    0,    0,    1,   11,   10,    0,   13,
   12,    0,    3,    0,    4,    6,    7,    8,    0,    0,
   16,    0,    0,    0,    0,    2,    5,   20,    0,    0,
    0,    0,   24,   32,   15,    0,    0,    0,   29,   23,
   22,    0,    9,    0,    0,   17,    0,    0,    0,    0,
    0,   86,   87,   89,   88,   90,   46,    0,    0,    0,
   45,    0,    0,   39,   41,   42,    0,   47,   48,   49,
   51,   52,   53,   54,   55,    0,   58,    0,   60,    0,
   82,    0,    0,    0,   33,    0,    0,   25,    0,   21,
    0,   79,    0,    0,    0,    0,    0,  125,   85,   73,
    0,    0,  103,  104,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   36,   40,   43,   57,    0,
  130,  131,  129,    0,   30,    0,   80,   71,   77,    0,
    0,    0,    0,   84,  101,  102,    0,   81,    0,    0,
    0,    0,    0,  111,  112,  113,  114,    0,    0,    0,
    0,    0,    0,   83,    0,    0,   92,    0,    0,  126,
    0,    0,    0,    0,    0,  105,  106,  107,    0,    0,
    0,    0,    0,    0,    0,    0,   96,    0,    0,    0,
    0,   26,    0,    0,   78,    0,   95,   68,   93,    0,
    0,    0,    0,    0,   65,   98,   97,    0,    0,    0,
   62,   67,    0,   66,    0,    0,   64,   69,    0,    0,
   61,
  ]
  yydgoto := [                          2,
    6,   14,   15,   16,   17,   18,   36,   29,   97,   21,
   30,   42,   22,   61,   88,   37,   38,   39,   23,  155,
  156,   62,   63,   64,   65,   66,   67,   68,   69,   70,
   71,   72,   73,   74,   75,    0,   76,   98,   99,   79,
  157,  194,  195,  130,  101,  198,  131,  102,   81,   82,
  103,  104,  105,  106,  148,  107,  108,  109,  110,   83,
  124,
  ]
  yysindex := [                      -272,
 -229,    0, -216,  -57,  -95,    0,    0,    0,   28,    0,
    0, -194,    0,  243,    0,    0,    0,    0, -155,   74,
    0,   35,   35,  346,  193,    0,    0,    0,   14,   81,
 -106,  207,    0,    0,    0, -155,  142,  147,    0,    0,
    0,  -69,    0, -155,  107,    0,  -56,  172,  177,   50,
  178,    0,    0,    0,    0,    0,    0,   50, -155,  -14,
    0,   95,  207,    0,    0,    0,  166,    0,    0,    0,
    0,    0,    0,    0,    0,  167,    0,    0,    0,  181,
    0,    0,  -34,   81,    0,  346,  189,    0,   81,    0,
  173,    0,  225,   50,   50,   50,  115,    0,    0,    0,
  199,  181,    0,    0,  156,  170,   43, -145,  -49,  -44,
   50,  195,  216,   50,   50,    0,    0,    0,    0,   -2,
    0,    0,    0,   50,    0,  346,    0,    0,    0,  208,
  229,  234,  115,    0,    0,    0,   50,    0,   50,   50,
   50,   50,   50,    0,    0,    0,    0,   50,   50,   50,
   50,   50,  235,    0,  149,  241,    0,  251,    9,    0,
  259,   50,   -3,   35,  267,    0,    0,    0,  156,  156,
  170,   43,   43, -145,  -49,  258,    0,   50,    0,   50,
   50,    0,  250,  -14,    0,   59,    0,    0,    0,  201,
  290,   -3, -109,   73,    0,    0,    0,  310,  229,  312,
    0,    0, -109,    0,   35,   50,    0,    0,  324,   35,
    0,
  ]
  yyrindex := [                         0,
    0,    0,    0,    0,    0,    0,    0,    0,  -45,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  100,
    0,    0,    0,  326,    0,    0,    0,    0,    0,   21,
    0,  244,    0,    0,    0,    0,    0,  338,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  323,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  -59,
    0,    0,  262,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  146,    0,    0,
    0,  -37,    0,   45,    0,    0,    0,    0,   71,    0,
    0,    0,  333,    0,    0,    0,    1,    0,    0,    0,
    0,   10,    0,    0,   57,   77,   15,  103,  109,  137,
    0,    0,  341,  264,  362,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  326,    0,    0,    0,    0,
  345,    0,   34,    0,    0,    0,  362,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  -28,    0,    0,  -26,    0,
    0,  323,    0,    0,    0,    0,    0,    0,   63,   69,
   83,   23,   97,  105,  110,  -85,    0,    0,  160,  264,
  362,    0,    0,   24,    0,  136,    0,    0,    0,    0,
    0,  371,    0,  174,    0,    0,    0,    0,  372,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,
  ]
  yygindex := [                         0,
    0,    0,  400,    0,    0,    0,  520,  356,  479,    0,
   48,    0,    0,    6,    0,  291,    0,  332,    0,  190,
    0,    0,    0,  353,    0,  245,  327,    0,    0,    0,
 -162,    0,    0,    0,    0,    0,   -6,  363,  395,    0,
  330,    0,  228,    0,  257,    0,  231,  397,    0,  451,
    0,  233,   37,  277,    0,   16,  279,  276,    0,    0,
    0,
  ]
$define YYTABLESIZE 671
  yytable := [                         84,
   15,  127,   92,   84,   84,   84,   84,   84,   84,   84,
   94,    1,   34,   32,   94,   94,   94,   94,   94,   94,
   94,   84,   84,  128,   84,  115,  123,   33,   34,   13,
  202,   31,   94,   94,   94,   94,   58,  100,    3,   50,
  202,  100,  100,  100,  100,  100,   99,  100,  181,    4,
   99,   99,   99,   99,   99,  117,   99,   44,  117,  100,
  100,  127,  100,  118,   18,    5,  118,   24,   99,   99,
  100,   99,   43,  117,  100,  100,  100,  100,  100,   18,
  100,  118,   96,   84,  127,   31,  129,   84,   31,   58,
   25,   89,  100,  100,   95,  100,   34,  108,   94,  108,
  108,  108,  146,  110,  147,  110,  110,  110,  114,  109,
   28,  109,  109,  109,   19,  108,  108,  115,  108,   31,
  115,  110,  110,  116,  110,  100,  116,  109,  109,   19,
  109,  180,  149,  150,   99,  115,  115,  119,  115,  117,
  119,  116,  116,  120,  116,  121,  120,  118,  121,  122,
  123,  200,  122,  123,  137,  119,  185,   32,  100,   46,
   31,  120,    7,  121,  172,  173,    8,  122,  123,  186,
    9,   45,   50,   10,   11,   61,   50,  124,  169,  170,
  124,  108,   85,   50,   50,  129,   59,  110,   12,   59,
   86,   85,  141,  109,   61,  124,   87,  139,  201,   90,
   91,  115,  140,   91,   59,   95,   14,  116,  207,   91,
  208,   93,  143,   63,  142,  211,   94,  111,   91,  116,
   15,  119,  127,  127,  118,  119,  120,  120,  126,  121,
  151,  127,   63,  122,  123,  154,  152,  114,   84,   84,
   84,   84,   84,   84,  128,  128,   58,  121,  122,   94,
   94,   94,   94,   94,   94,   94,   94,  138,   61,   44,
   61,  124,   35,  159,   58,   57,  162,   52,   53,   54,
   55,   56,  163,  177,  164,  176,  100,  100,  100,  100,
  100,  100,  127,  127,  178,   99,   99,   99,   99,   99,
   99,  179,  117,  117,  117,  117,   63,   58,   63,  182,
  118,  118,  118,  118,  158,  127,  127,  187,  192,  100,
  100,  100,  100,  100,  100,   35,   57,  193,  144,  145,
   52,   53,   54,   55,   56,  196,  165,  135,  136,   32,
  197,  203,  108,  108,  108,  108,  108,  108,  110,  110,
  110,  110,  110,  110,  109,  109,  109,  109,  109,  109,
  205,  206,  115,  115,  115,  115,  115,  115,  116,  116,
  116,  116,  116,  116,  210,   14,   28,   26,   38,  190,
  191,  166,  167,  168,  119,  119,  119,  119,   27,  100,
   32,   74,  120,  120,  121,  121,   37,  112,   35,  122,
  123,   72,   61,   61,   77,   61,   61,   61,   61,   44,
   61,   61,   35,   70,   61,   61,   61,   61,   61,   61,
   61,   76,   75,   27,  113,  117,  161,  125,  183,  128,
  188,  204,  199,  132,  171,   77,   78,  175,   80,  174,
   63,   63,    0,   63,   63,   63,   63,    0,   63,   63,
  153,    0,   63,   63,   63,   63,   63,   63,   63,    0,
    7,    0,    0,  160,    8,   77,   40,   78,   35,   80,
    0,   10,   11,   47,    7,    0,   48,   49,    8,   50,
    0,   51,   35,    0,    0,   10,   11,   52,   53,   54,
   55,   56,    7,   20,    0,    0,    8,   78,    0,   80,
   35,  100,   20,   10,   11,   52,   53,   54,   55,   56,
    7,    0,   20,   20,    8,    0,    0,  189,    9,    0,
   60,   10,   11,    0,   47,    0,    0,   48,   49,    0,
   50,    0,   51,   35,   19,   77,   12,    0,   52,   53,
   54,   55,   56,   19,    0,  209,    0,    0,   77,    0,
    0,   60,    0,    0,   41,  134,  134,    0,    0,    0,
    0,   59,    0,    0,   77,    0,    0,   78,    0,   80,
    0,    0,    0,    0,   20,    0,    0,    0,    0,    0,
   78,   60,   80,  133,  133,    0,    0,    0,    0,    0,
    0,    0,   59,    0,    0,    0,   78,    0,   80,  134,
  134,  134,  134,  134,    0,    0,    0,    0,  134,  134,
  134,  134,  134,    7,   20,    0,    0,    8,    0,    0,
    0,   35,   59,    0,   10,   11,    0,  133,  133,  133,
  133,  133,    0,    0,    0,    0,  133,  133,  133,  133,
  133,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  184,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  184,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  184,
  ]
  yycheck := [                         37,
   46,   61,   59,   41,   42,   43,   44,   45,   46,   47,
   37,  284,   41,  123,   41,   42,   43,   44,   45,   46,
   47,   59,   60,   61,   62,   40,   61,   22,   23,  125,
  193,   46,   59,   60,   61,   62,   40,   37,  268,  125,
  203,   41,   42,   43,   44,   45,   37,   47,   40,  266,
   41,   42,   43,   44,   45,   41,   47,   44,   44,   59,
   60,   61,   62,   41,   44,  123,   44,   40,   59,   60,
   37,   62,   59,   59,   41,   42,   43,   44,   45,   59,
   47,   59,   33,   36,   61,   41,   93,  125,   44,   40,
  285,   44,   59,   60,   45,   62,  125,   41,  125,   43,
   44,   45,   60,   41,   62,   43,   44,   45,  123,   41,
  266,   43,   44,   45,   44,   59,   60,   41,   62,   46,
   44,   59,   60,   41,   62,  125,   44,   59,   60,   59,
   62,  123,  278,  279,  125,   59,   60,   41,   62,  125,
   44,   59,   60,   41,   62,   41,   44,  125,   44,   41,
   41,  261,   44,   44,   40,   59,  163,  123,  125,  266,
   46,   59,  258,   59,  149,  150,  262,   59,   59,  164,
  266,   91,  258,  269,  270,   40,  262,   41,  142,  143,
   44,  125,   41,  269,  270,  192,   41,  125,  284,   44,
   44,   46,   37,  125,   59,   59,  266,   42,  193,   93,
   41,  125,   47,   44,   59,   46,  266,  125,  203,  266,
  205,   40,   43,   40,   45,  210,   40,   40,   59,  125,
  266,  125,  282,  283,   59,   59,   46,  125,   40,  125,
  280,   59,   59,  125,  125,   41,  281,  123,  276,  277,
  278,  279,  280,  281,  282,  283,   40,  282,  283,  276,
  277,  278,  279,  280,  281,  282,  283,   59,  123,   44,
  125,  125,  266,  266,   40,   59,   59,  271,  272,  273,
  274,  275,   44,  125,   41,   41,  276,  277,  278,  279,
  280,  281,  282,  283,   44,  276,  277,  278,  279,  280,
  281,   41,  278,  279,  280,  281,  123,   40,  125,   41,
  278,  279,  280,  281,  115,  282,  283,   41,   59,  276,
  277,  278,  279,  280,  281,  266,   59,  259,  276,  277,
  271,  272,  273,  274,  275,  125,  137,   95,   96,  123,
   41,  259,  276,  277,  278,  279,  280,  281,  276,  277,
  278,  279,  280,  281,  276,  277,  278,  279,  280,  281,
   41,   40,  276,  277,  278,  279,  280,  281,  276,  277,
  278,  279,  280,  281,   41,  266,   41,  125,  125,  180,
  181,  139,  140,  141,  278,  279,  280,  281,   41,   50,
  123,   59,  280,  281,  280,  281,  125,   58,  125,  281,
  281,   59,  257,  258,   32,  260,  261,  262,  263,   59,
  265,  266,   41,   59,  269,  270,  271,  272,  273,  274,
  275,   41,   41,   14,   59,   63,  126,   86,  162,   93,
  176,  194,  192,   94,  148,   63,   32,  152,   32,  151,
  257,  258,   -1,  260,  261,  262,  263,   -1,  265,  266,
  111,   -1,  269,  270,  271,  272,  273,  274,  275,   -1,
  258,   -1,   -1,  124,  262,   93,  264,   63,  266,   63,
   -1,  269,  270,  257,  258,   -1,  260,  261,  262,  263,
   -1,  265,  266,   -1,   -1,  269,  270,  271,  272,  273,
  274,  275,  258,    5,   -1,   -1,  262,   93,   -1,   93,
  266,  162,   14,  269,  270,  271,  272,  273,  274,  275,
  258,   -1,   24,   25,  262,   -1,   -1,  178,  266,   -1,
   32,  269,  270,   -1,  257,   -1,   -1,  260,  261,   -1,
  263,   -1,  265,  266,    5,  163,  284,   -1,  271,  272,
  273,  274,  275,   14,   -1,  206,   -1,   -1,  176,   -1,
   -1,   63,   -1,   -1,   25,   95,   96,   -1,   -1,   -1,
   -1,   32,   -1,   -1,  192,   -1,   -1,  163,   -1,  163,
   -1,   -1,   -1,   -1,   86,   -1,   -1,   -1,   -1,   -1,
  176,   93,  176,   95,   96,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   63,   -1,   -1,   -1,  192,   -1,  192,  139,
  140,  141,  142,  143,   -1,   -1,   -1,   -1,  148,  149,
  150,  151,  152,  258,  126,   -1,   -1,  262,   -1,   -1,
   -1,  266,   93,   -1,  269,  270,   -1,  139,  140,  141,
  142,  143,   -1,   -1,   -1,   -1,  148,  149,  150,  151,
  152,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  163,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  176,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  192,
  ]
$define YYFINAL 2
$define YYMAXTOKEN 285
  yyname := [
"end-of-file",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
"'!'",0,0,0,"'%'",0,0,"'('","')'","'*'","'+'","','","'-'","'.'","'/'",0,0,0,0,0,
0,0,0,0,0,0,"';'","'<'","'='","'>'",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,"'['",0,"']'",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,"'{'",0,"'}'",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,"BREAK","DOUBLE","ELSE","FOR","IF",
"INT","RETURN","VOID","WHILE","IDENTIFIER","CLASSNAME","CLASS","STRING","BOOL",
"INTLIT","DOUBLELIT","STRINGLIT","BOOLLIT","NULLVAL","LESSTHANOREQUAL",
"GREATERTHANOREQUAL","ISEQUALTO","NOTEQUALTO","LOGICALAND","LOGICALOR",
"INCREMENT","DECREMENT","PUBLIC","STATIC",
  ]
  yyrule := [
"$accept : ClassDecl",
"ClassDecl : PUBLIC CLASS IDENTIFIER ClassBody",
"ClassBody : '{' ClassBodyDecls '}'",
"ClassBody : '{' '}'",
"ClassBodyDecls : ClassBodyDecl",
"ClassBodyDecls : ClassBodyDecls ClassBodyDecl",
"ClassBodyDecl : FieldDecl",
"ClassBodyDecl : MethodDecl",
"ClassBodyDecl : ConstructorDecl",
"FieldDecl : Type VarDecls ';'",
"Type : INT",
"Type : DOUBLE",
"Type : BOOL",
"Type : STRING",
"Type : Name",
"Name : IDENTIFIER",
"Name : QualifiedName",
"QualifiedName : Name '.' IDENTIFIER",
"VarDecls : VarDeclarator",
"VarDecls : VarDecls ',' VarDeclarator",
"VarDeclarator : IDENTIFIER",
"VarDeclarator : VarDeclarator '[' ']'",
"MethodReturnVal : Type",
"MethodReturnVal : VOID",
"MethodDecl : MethodHeader Block",
"MethodHeader : PUBLIC STATIC MethodReturnVal MethodDeclarator",
"MethodDeclarator : IDENTIFIER '(' FormalParmListOpt ')'",
"FormalParmListOpt : FormalParmList",
"FormalParmListOpt :",
"FormalParmList : FormalParm",
"FormalParmList : FormalParmList ',' FormalParm",
"FormalParm : Type VarDeclarator",
"ConstructorDecl : ConstructorDeclarator Block",
"ConstructorDeclarator : IDENTIFIER '(' FormalParmListOpt ')'",
"ArgListOpt : ArgList",
"ArgListOpt :",
"Block : '{' BlockStmtsOpt '}'",
"BlockStmtsOpt : BlockStmts",
"BlockStmtsOpt :",
"BlockStmts : BlockStmt",
"BlockStmts : BlockStmts BlockStmt",
"BlockStmt : LocalVarDeclStmt",
"BlockStmt : Stmt",
"LocalVarDeclStmt : LocalVarDecl ';'",
"LocalVarDecl : Type VarDecls",
"Stmt : Block",
"Stmt : ';'",
"Stmt : ExprStmt",
"Stmt : BreakStmt",
"Stmt : ReturnStmt",
"Stmt :",
"Stmt : IfThenStmt",
"Stmt : IfThenElseStmt",
"Stmt : IfThenElseIfStmt",
"Stmt : WhileStmt",
"Stmt : ForStmt",
"StmtWithoutTrailingSubstatement :",
"ExprStmt : StmtExpr ';'",
"StmtExpr : Assignment",
"StmtExpr : MethodCall",
"StmtExpr : InstantiationExpr",
"IfThenStmt : IF '(' Expr ')' Block",
"IfThenElseStmt : IF '(' Expr ')' Block ELSE Block",
"IfThenElseIfStmt : IF '(' Expr ')' Block ElseIfSequence",
"IfThenElseIfStmt : IF '(' Expr ')' Block ElseIfSequence ELSE Block",
"ElseIfSequence : ElseIfStmt",
"ElseIfSequence : ElseIfSequence ElseIfStmt",
"ElseIfStmt : ELSE IfThenStmt",
"WhileStmt : WHILE '(' Expr ')' Stmt",
"ForStmt : FOR '(' ForInit ';' ExprOpt ';' ForUpdate ')' Block",
"ForInit : StmtExprList",
"ForInit : LocalVarDecl",
"ForInit :",
"ExprOpt : Expr",
"ExprOpt :",
"ForUpdate : StmtExprList",
"ForUpdate :",
"StmtExprList : StmtExpr",
"StmtExprList : StmtExprList ',' StmtExpr",
"BreakStmt : BREAK ';'",
"BreakStmt : BREAK IDENTIFIER ';'",
"ReturnStmt : RETURN ExprOpt ';'",
"Primary : Literal",
"Primary : '(' Expr ')'",
"Primary : FieldAccess",
"Primary : MethodCall",
"Literal : INTLIT",
"Literal : DOUBLELIT",
"Literal : BOOLLIT",
"Literal : STRINGLIT",
"Literal : NULLVAL",
"InstantiationExpr : Name '(' ArgListOpt ')'",
"ArgList : Expr",
"ArgList : ArgList ',' Expr",
"FieldAccess : Primary '.' IDENTIFIER",
"MethodCall : Name '(' ArgListOpt ')'",
"MethodCall : Name '{' ArgListOpt '}'",
"MethodCall : Primary '.' IDENTIFIER '(' ArgListOpt ')'",
"MethodCall : Primary '.' IDENTIFIER '{' ArgListOpt '}'",
"PostFixExpr : Primary",
"PostFixExpr : Name",
"UnaryExpr : '-' UnaryExpr",
"UnaryExpr : '!' UnaryExpr",
"UnaryExpr : PostFixExpr",
"MulExpr : UnaryExpr",
"MulExpr : MulExpr '*' UnaryExpr",
"MulExpr : MulExpr '/' UnaryExpr",
"MulExpr : MulExpr '%' UnaryExpr",
"AddExpr : MulExpr",
"AddExpr : AddExpr '+' MulExpr",
"AddExpr : AddExpr '-' MulExpr",
"RelOp : LESSTHANOREQUAL",
"RelOp : GREATERTHANOREQUAL",
"RelOp : '<'",
"RelOp : '>'",
"RelExpr : AddExpr",
"RelExpr : RelExpr RelOp AddExpr",
"EqExpr : RelExpr",
"EqExpr : EqExpr ISEQUALTO RelExpr",
"EqExpr : EqExpr NOTEQUALTO RelExpr",
"CondAndExpr : EqExpr",
"CondAndExpr : CondAndExpr LOGICALAND EqExpr",
"CondOrExpr : CondAndExpr",
"CondOrExpr : CondOrExpr LOGICALOR CondAndExpr",
"Expr : CondOrExpr",
"Expr : Assignment",
"Assignment : LeftHandSide AssignOp Expr",
"LeftHandSide : Name",
"LeftHandSide : FieldAccess",
"AssignOp : '='",
"AssignOp : INCREMENT",
"AssignOp : DECREMENT",
  ]

end

#####################################################################
#####################################################################
invocable all    # need to look up semantic actions by name

global yytext    # user variable to return contextual strings
global yyval     # used to return semantic vals from action routines
global yylval    # the 'lval' (result) I got from yylex()
global yydebug   # (boolean) do I want debug output?
global yynerrs   # (integer) number of errors so far
global yyerrflag # (integer) was there an error?
global yychar    # (integer) the current working character
global action    # maps an integer to a semantic action procedure

global yylhs
global yylen
global yydefred
global yydgoto
global yysindex
global yyrindex
global yygindex
global yytable
global yycheck
global yyname
global yyrule

global statestk         # state stack
global valstk           # value stack
################################################################
# procedure: init_stacks : allocate and prepare stacks
################################################################
procedure init_stacks()
  local i
  statestk := []
  valstk := []
  yyval  := 0 
  yylval := 0 
  action := list(1000, action_null)  # remove hard coded 1000 later
  every i := 1 to 1000 do action[i] := proc("action_" || i)
end

$define YYACCEPT return 0
$define YYABORT return 1
################################################################
# procedure: yyparse : parse input and execute indicated items
################################################################
procedure yyparse()
  local yyn        # next next thing to do
  local yym        #
  local yystate    # current parsing state from state table
  local yys        # current token string
  local doaction   # set to 1 if there need to execute action
  local token      # current token

  if /yytable then init() 
  init_stacks() 
  yynerrs   := 0 
  yyerrflag := 0 
  yychar    := -1           # impossible char forces a read
  yystate   := 0            # initial state
  push(statestk, yystate)   # save it

  repeat { # until parsing is done, either correctly, or w/error
    doaction := 1 

    ##### NEXT ACTION (from reduction table)
	yyn := yydefred[yystate+1]

    while yyn = 0 do {

      if yychar < 0 then {   # we want a char?
        yychar := yylex()    # get next token
        ##### ERROR CHECK ####
        if yychar < 0 then { # it it didn't work/error
          yychar := 0        # change it to default string (no -1!)
          if \yydebug = 1 then yylexdebug(yystate, yychar) 
          }
        } # yychar < 0
	  
      yyn := yysindex[yystate+1]  # get amount to shift by (shift index)

      if (yyn ~= 0)           & ((yyn +:= yychar) >= 0) & 
         (yyn <= YYTABLESIZE) & (yycheck[yyn+1] = yychar) then {
		
        ##### NEXT STATE ####
        yystate := yytable[yyn+1] # we are in a new state
        push(statestk, yystate)   # save it
        push(valstk, yylval)      # push our lval as the input for next rule
        yychar := -1              # since we have 'eaten' a token, say we need another
        if yyerrflag > 0 then     # have we recovered an error?
           yyerrflag -:= 1        # give ourselves credit
        doaction := 0             # but don't process yet
        break                     # quit the yyn=0 loop
        }

    yyn := yyrindex[yystate+1]    # reduce

    if (yyn ~= 0)           & ((yyn +:= yychar) >= 0) &
       (yyn <= YYTABLESIZE) & (yycheck[yyn+1] = yychar) then {
      # e reduced!
      yyn      := yytable[yyn+1] 
      doaction := 1  # get ready to execute
      break          # drop down to actions
      }
    else { #ERROR RECOVERY
      if yyerrflag == 0 then {
        (\yyerror | write)("syntax error") 
        yynerrs +:= 1 
      }
      if yyerrflag < 3 then {     # low error count?
        yyerrflag := 3 
        repeat { #do until break
          if *statestk < 1 then {  # check for under & overflow here
            (\yyerror | write)("stack underflow. aborting...")   # note lower case 's'
            return 1 
          }
          yyn := yysindex[statestk[1]] 
          if ((yyn ~= 0) & (yyn +:= YYERRCODE) >= 0 &
                    yyn <= YYTABLESIZE & yycheck[yyn+1] == YYERRCODE) then {
            yystate := yytable[yyn+1] 
            push(statestk, yystate) 
            push(valstk, yylval) 
            doaction := 0 
            break 
          }
          else {
            if *statestk = 0 then { # check for under & overflow here
              write("Stack underflow. aborting...") # capital 'S'
              return 1 
            }
            pop(statestk) 
            pop(valstk) 
            }
          }
        }
      else  # discard this token
        {
        if yychar = 0 then return 1  # yyabort
        if \yydebug = 1 then {
          yys := &null 
          if yychar <= YYMAXTOKEN then yys := yyname[yychar+1] 
          if integer(yys) & yys = 0 then yys := "illegal-symbol" 
          write("state ",  yystate, ", error recovery discards token ",
                yychar, " (", yys, ")") 
          }
        yychar := -1       # read another
        }
      } # end error recovery
      yyn := yydefred[yystate+1] 
    }# yyn = 0 loop

    if doaction = 0 then   # any reason not to proceed?
      next                 # skip action

    yym := yylen[yyn+1]    # get count of terminals on rhs
    yyval := valstk[yym]   # get current semantic value
    if arv := action[yyn]() then return arv # execute the semantic action

    ##### Now let's reduce... ####
    every 1 to yym do pop(statestk)# we just reduced yylen states
    yystate := statestk[1]        # get new state

    every 1 to yym do pop(valstk) # corresponding value drop
    yym := yylhs[yyn+1]           # select next TERMINAL(on lhs)
    if yystate = 0 & yym = 0 then {
                                  # done? 'rest' state and at first TERMINAL
      yystate := YYFINAL          # explicitly say we're done
      push(statestk, YYFINAL)     # and save it
      push(valstk, yyval)         # also save the semantic value of parsing
      if yychar < 0 then {        # we want another character?
        yychar := yylex()         # get next character
        if yychar < 0 then yychar := 0   #clean, if necessary
      }
      if yychar = 0 then break    # Good exit (if lex returns 0  -)
                                  # quit the loop--all DONE
    } # if yystate
    else {                        #else not done yet
      # get next state and push, for next yydefred[]
      yyn := yygindex[yym+1]        # find out where to go
      if (yyn ~= 0)           & ((yyn +:= yystate) >= 0) &
         (yyn <= YYTABLESIZE) & (yycheck[yyn+1] = yystate) then {
        yystate := yytable[yyn+1]   # get new state
        }
      else {
        yystate := yydgoto[yym+1]   # else go to new defred
	     }
      push(statestk, yystate)       # going again, so push state & val...
      push(valstk, yyval)           # for next action
      }
    } # main loop

  return 0 # yyaccept!!
end

### end of procedure parse() ######################################

### start semantic actions ########################################

procedure action_null()
  #write("null action")
end

